// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:KzutHhFD5pYppDa6@uniformly-animating-catbird.data-1.use1.tembo.io:5432/postgres"
}

enum StudyTags {
  Quiet
  Background_Noise
  Music_Allowed
  Solo_Study
  Group_Discussion
  Pair_Work
  Morning
  Afternoon
  Evening
  Night
  Visual_Learner
  Auditory_Learner
}

enum Grade {
  Freshman
  Sophomore
  Junior
  Senior
  Graduate_Student
}

enum Gender {
  Female
  Male
  Nonbinary
  Other
  Prefer_not_to_say
}

enum SwipeAction {
  No
  Yes
}

enum SwipeStatus {
  Pending
  Accepted
  Denied
}

enum NotificationType {
  Match
  Message
  StudyGroup
}

model Button {
  id           Int     @id @default(autoincrement())
  label        String
  action       String
  studyGroupId Int?

  message      Message? 
}

model User {
  id                  Int            @id @default(autoincrement())
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt

  firstName           String
  lastName            String
  email               String         @unique 
  username            String         @unique
  password            String


  ideal_match_factor  StudyTags?
  age                 Int?
  college             String?
  major               String?
  grade               Grade?
  relevant_courses    String[]
  study_method        String?
  bio                 String?
  gender              Gender?
  profilePic          String?
  studyHabitTags      StudyTags[]       // Array of tags for study habits


  studyGroups         StudyGroup[]   @relation("UserStudyGroups")
  createdStudyGroups  StudyGroup[]   @relation("CreatedStudyGroups")

  swipesGiven         Swipe[]        @relation("SwipesGiven")
  swipesReceived      Swipe[]        @relation("SwipesReceived")

  matchesAsUser1      Match[]        @relation("MatchUser1")
  matchesAsUser2      Match[]        @relation("MatchUser2")
  
  chats               Chat[]         @relation("ChatUsers")
  messages            Message[]
  notifications       Notification[]

  // Password reset fields
  resetToken          String?        @unique // Nullable, unique reset token
  resetTokenExpiry    DateTime?      // Expiration timestamp for the reset token

  availability        Availability[]
  unReadMessages      Boolean?      @default(true)
  lastOpened          LastOpened[] 
  lastUpdatedChats Chat[] @relation("LastUpdatedBy") // Inverse relation for lastUpdatedBy
}

model StudyGroup {
  id          Int       @id @default(autoincrement())
  name        String
  subject     String?
  description String?
  created_by  Int
  created_at  DateTime  @default(now())
  creator     User      @relation("CreatedStudyGroups", fields: [created_by], references: [id])
  users       User[]    @relation("UserStudyGroups")
  matches     Match[]   @relation("StudyGroupMatches")

  // Swipe relation: Users can swipe on a study group.
  swipesGiven  Swipe[]  @relation("StudyGroupSwipes")

  // Connection to Chat
  chatID       Int?     @unique // Link to a Chat table if each StudyGroup has its own chat
  chat         Chat?    @relation("StudyGroupChat") // Optional, if you want a relation with the Chat model
  ideal_match_factor  StudyTags?

  profilePic   String?  // Optional field to store a profile picture

  availability Availability[]

  scheduleDays String[] @default(["Sun", "Mon", "Tues", "Wed", "Thur", "Fri", "Sat"])
  scheduleStartTime String @default("9:00 AM")
  scheduleEndTime String @default("5:00 PM")

}

model Swipe {
  id           Int      @id @default(autoincrement())
  userId       Int
  targetUserId Int?     // Optional field to reference the target User
  targetGroupId Int?    // Optional field to reference the target StudyGroup
  direction    SwipeAction
  user         User     @relation("SwipesGiven", fields: [userId], references: [id], onDelete: Cascade)
  targetUser   User?    @relation("SwipesReceived", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetGroup  StudyGroup? @relation("StudyGroupSwipes", fields: [targetGroupId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  status       SwipeStatus @default(Pending)

  message      String?  // Optional field to store a message
}


model Match {
  id            Int      @id @default(autoincrement())
  user1Id       Int
  user2Id       Int?
  studyGroupId  Int?
  user1         User     @relation("MatchUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2         User?    @relation("MatchUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  studyGroup    StudyGroup? @relation("StudyGroupMatches", fields: [studyGroupId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  // If the study group is null, this is a user-to-user match
  isStudyGroupMatch Boolean @default(false)
}

model Chat {
  id            Int       @id @default(autoincrement())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  users         User[]    @relation("ChatUsers") // One-to-many through the join table
  lastUpdatedBy User?     @relation("LastUpdatedBy", fields: [lastUpdatedById], references: [id]) // Named relation
  lastUpdatedById Int?  
  messages      Message[] // One-to-many relationship to Message
  studyGroupId  Int?      @unique // Add this line to define the studyGroupId field
  studyGroup    StudyGroup? @relation("StudyGroupChat", fields: [studyGroupId], references: [id]) // Optional relation to StudyGroup
  lastOpened     LastOpened[] // <-- Relation to track when each user last opened the chat
}

model LastOpened {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    Int
  timestamp DateTime @default(now())

  chat      Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId]) // Ensures each user has only one timestamp per chat
}

model Message {
  id           Int         @id @default(autoincrement())
  content      String
  createdAt    DateTime    @default(now())
  userId       Int?
  chatId       Int
  user         User?       @relation(fields: [userId], references: [id]) // One-to-many relation to User
  chat         Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade) // One-to-many relation to Chat
  liked        Boolean     @default(false)
  system       Boolean     @default(false)
  
  
  isButton     Boolean  @default(false)
  buttonDataId Int?     @unique // Nullable for non-button messages
  buttonData   Button?  @relation(fields: [buttonDataId], references: [id], onDelete: Cascade)
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  other_id   Int?
  type       NotificationType
  message    String
  read       Boolean  @default(false)
  created_at DateTime @default(now())
  chatID     Int?
  studyGroupID Int?
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Availability {
  id           Int        @id @default(autoincrement())
  userId       Int
  studyGroupId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyGroup   StudyGroup @relation(fields: [studyGroupId], references: [id], onDelete: Cascade)
  availability Json       // Stores selected time slots in JSON format

  @@unique([userId, studyGroupId]) // Ensures one availability entry per user per study group
}